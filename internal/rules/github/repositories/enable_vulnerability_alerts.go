package repositories

import (
	"github.com/aquasecurity/defsec/internal/rules"
	"github.com/aquasecurity/defsec/pkg/providers"
	"github.com/aquasecurity/defsec/pkg/scan"
	"github.com/aquasecurity/defsec/pkg/severity"
	"github.com/aquasecurity/defsec/pkg/state"
)

var CheckEnableVulnerabilityAlerts = rules.Register(
	scan.Rule{
		AVDID:      "AVD-GIT-0003",
		Provider:   providers.GitHubProvider,
		Service:    "repositories",
		ShortCode:  "enable_vulnerability_alerts",
		Summary:    "GitHub repository has vulnerability alerts disabled.",
		Impact:     "Known vulnerabilities may not be discovered",
		Resolution: "Enable vulnerability alerts",
		Explanation: `GitHub repository should be set to use vulnerability alerts.

You can do this by setting the <code>vulnerability_alerts</code> attribute to 'true'.`,
		Links: []string{
			"https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-alerts-for-vulnerable-dependencies",
		},
		Terraform: &scan.EngineMetadata{
			GoodExamples:        terraformEnableVulnerabilityAlertsGoodExamples,
			BadExamples:         terraformEnableVulnerabilityAlertsBadExamples,
			Links:               terraformEnableVulnerabilityAlertsLinks,
			RemediationMarkdown: terraformEnableVulnerabilityAlertsRemediationMarkdown,
		},
		Severity: severity.High,
	},
	func(s *state.State) (results scan.Results) {
		for _, repo := range s.GitHub.Repositories {
			if repo.IsUnmanaged() {
				continue
			}
			if repo.IsArchived() {
				continue
			}
			if repo.VulnerabilityAlerts.IsFalse() {
				results.Add(
					"Repository does not have vulnerability alerts enabled,",
					repo.VulnerabilityAlerts,
				)
			} else {
				results.AddPassed(repo)
			}
		}
		return
	},
)
